import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

public class GamePanel extends JPanel implements Runnable{
    //Screen setting
	final int originalTileSize = 16; //16x16 title(Kich thuoc tieu chuan cua 1 o trong ban do)
	final int scale = 3;
	
	final int tileSize = originalTileSize * scale;// 48x48 tile 
	final int maxScreenCol = 16;
	final int maxScreenRow = 12;
	final int screenWidth = tileSize * maxScreenCol;//768 pixels
	final int screenHeigh = tileSize * maxScreenRow;// 576 pixels
	Thread gameThread;
	KeyHandler keyH = new KeyHandler();
	
	//FPS(Frame Per Second)
	int FPS = 60;
	//Set player's default position
	int playerX = 100;
	int playerY = 100;
	int playerSpeed = 4;
	public GamePanel() {
		this.setPreferredSize(new Dimension(screenWidth, screenHeigh));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
	}
	
	
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}
//	@Override
//	public void run() {
//		
//		double drawInterval = 1000000000/FPS ;// 0.016666 seconds
//		double nextDrawTime = System.nanoTime() + drawInterval;
//		while(gameThread != null) {
//			long currentTime = System.nanoTime();
//			System.out.println("current Time:" + currentTime);
//		//	System.out.println("The game loop is running");
//		// UPDATE: update information such as character positions
//			update();
//		// DRAW: draw the screen with the updated information
//            repaint();
//            
//            try {
//            	double remainingTime = nextDrawTime - System.nanoTime();
//            	remainingTime = remainingTime/1000000;
//            	
//            	if(remainingTime < 0) {
//            		remainingTime = 0;
//            	}
//            	Thread.sleep((long)remainingTime);
//            	
//            	nextDrawTime += drawInterval;
//            	
//            }
//            catch(InterruptedException e) {
//            	e.printStackTrace();
//            }
//		}
//	}
    public void run() {
    	double drawInterval = 1000000000/FPS;
    	double delta = 0;
    	long lastTime = System.nanoTime();
    	long currentTime;
    	long timer = 0;
    	int drawCount = 0;
    	
    	while(gameThread != null) {
    		currentTime = System.nanoTime();
    		delta += (currentTime - lastTime)/drawInterval;
    		
    		lastTime = currentTime;
    		if(delta > 1) {
    			update();
    			repaint();
    			delta--;
    			drawCount++;
    		}
    		if(timer >= 1000000000) {
    			System.out.println("FPS: " + drawCount);
    			drawCount = 0;
    			timer = 0;
    		}
    	}
    	}
	public void update() {
		if(keyH.upPressed == true) {
			playerY -= playerSpeed;
		}
		else if(keyH.downPressed == true) {
			playerY += playerSpeed;
		}
		else if(keyH.leftPressed == true) {
			playerX -= playerSpeed;
		}
		else if(keyH.rightPressed == true) {
			playerX += playerSpeed;
		}
		
		
		
	}
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D)g;
		g2.setColor(Color.white);
		g2.fillRect(playerX, playerY, tileSize, tileSize);
		g2.dispose();
	}
}
